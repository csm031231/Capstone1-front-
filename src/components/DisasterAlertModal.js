import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  Modal,
  ScrollView,
  ActivityIndicator,
  Alert,
} from 'react-native';

const DisasterAlertModal = ({ visible, onClose }) => {
  const [alerts, setAlerts] = useState([]);
  const [loading, setLoading] = useState(false);
  const [selectedCategory, setSelectedCategory] = useState('all');

  const categories = [
    { id: 'all', name: 'Ï†ÑÏ≤¥', icon: 'üìã' },
    { id: 'weather', name: 'Í∏∞ÏÉÅ', icon: 'üå¶Ô∏è' },
    { id: 'earthquake', name: 'ÏßÄÏßÑ', icon: 'üèóÔ∏è' },
    { id: 'fire', name: 'ÌôîÏû¨', icon: 'üî•' },
    { id: 'flood', name: 'ÏàòÌï¥', icon: 'üåä' },
    { id: 'other', name: 'Í∏∞ÌÉÄ', icon: '‚ö†Ô∏è' }
  ];

  // Ïû¨ÎÇúÎ¨∏Ïûê Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
  const fetchAlerts = async () => {
    setLoading(true);
    try {
      // Ïã§Ï†ú Íµ¨ÌòÑÏãú API Ìò∏Ï∂ú
      const mockAlerts = [
        {
          id: 1,
          title: '[Í∏¥Í∏âÏû¨ÎÇúÎ¨∏Ïûê] Ìò∏Ïö∞ Í≤ΩÎ≥¥ Î∞úÎ†π',
          content: 'ÍπÄÌï¥ÏãúÏóê Ìò∏Ïö∞Í≤ΩÎ≥¥Í∞Ä Î∞úÎ†πÎêòÏóàÏäµÎãàÎã§. Ï†ÄÏßÄÎåÄ Î∞è ÏÉÅÏäµÏπ®ÏàòÏßÄÏó≠ Ï£ºÎØºÎì§ÏùÄ ÏïàÏ†ÑÌïú Í≥≥ÏúºÎ°ú ÎåÄÌîºÌïòÏãúÍ∏∞ Î∞îÎûçÎãàÎã§. ÌïòÏ≤ú Í∑ºÏ≤ò Ï†ëÍ∑ºÏùÑ ÏÇºÍ∞ÄÌïòÏãúÍ≥†, ÏßÄÌïòÍ≥µÍ∞Ñ Ïù¥Ïö©ÏùÑ ÏûêÏ†úÌï¥ Ï£ºÏãúÍ∏∞ Î∞îÎûçÎãàÎã§.',
          category: 'weather',
          severity: 'warning', // info, warning, emergency
          location: 'Í≤ΩÎÇ® ÍπÄÌï¥Ïãú',
          time: '2ÏãúÍ∞Ñ Ï†Ñ',
          timestamp: '2024-01-15 14:30',
          isRead: false
        },
        {
          id: 2,
          title: '[Ïû¨ÎÇúÎ¨∏Ïûê] Ï†ïÏ†Ñ ÏïàÎÇ¥',
          content: 'ÍπÄÌï¥Ïãú Ïû•Ïú†Î©¥ ÏùºÎåÄÏóê Ï†ïÏ†ÑÏù¥ Î∞úÏÉùÌñàÏäµÎãàÎã§. Î≥µÍµ¨ ÏòàÏÉÅÏãúÍ∞ÑÏùÄ Ïò§ÌõÑ 6ÏãúÍ≤ΩÏûÖÎãàÎã§. ÏóòÎ¶¨Î≤†Ïù¥ÌÑ∞ Ïù¥Ïö©ÏùÑ ÏÇºÍ∞ÄÌïòÏãúÍ≥†, Ï¥õÎ∂à ÎåÄÏã† ÏÜêÏ†ÑÎì±ÏùÑ ÏÇ¨Ïö©Ìï¥ Ï£ºÏãúÍ∏∞ Î∞îÎûçÎãàÎã§.',
          category: 'other',
          severity: 'info',
          location: 'ÍπÄÌï¥Ïãú Ïû•Ïú†Î©¥',
          time: '5ÏãúÍ∞Ñ Ï†Ñ',
          timestamp: '2024-01-15 11:30',
          isRead: true
        },
        {
          id: 3,
          title: '[Í∏¥Í∏âÏû¨ÎÇúÎ¨∏Ïûê] Í∞ïÌíç Ï£ºÏùòÎ≥¥',
          content: 'Í≤ΩÎÇ® Ï†Ñ ÏßÄÏó≠Ïóê Í∞ïÌíçÏ£ºÏùòÎ≥¥Í∞Ä Î∞úÎ†πÎêòÏóàÏäµÎãàÎã§. ÏãúÏÜç 60km Ïù¥ÏÉÅÏùò Í∞ïÌïú Î∞îÎûåÏù¥ ÏòàÏÉÅÎêòÎãà, Ïô∏Ï∂úÏùÑ ÏûêÏ†úÌïòÏãúÍ≥† Í∞ÑÌåê, ÌòÑÏàòÎßâ Îì± ÎÇôÌïòÎ¨ºÏóê Ï£ºÏùòÌïòÏãúÍ∏∞ Î∞îÎûçÎãàÎã§.',
          category: 'weather',
          severity: 'warning',
          location: 'Í≤ΩÎÇ® Ï†ÑÏ≤¥',
          time: '1Ïùº Ï†Ñ',
          timestamp: '2024-01-14 09:15',
          isRead: true
        },
        {
          id: 4,
          title: '[Ïû¨ÎÇúÎ¨∏Ïûê] ÌôîÏû¨ Î∞úÏÉù ÏïåÎ¶º',
          content: 'ÍπÄÌï¥Ïãú ÎÇ¥Ïô∏Îèô Ï£ºÌÉùÍ∞ÄÏóêÏÑú ÌôîÏû¨Í∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. ÏÜåÎ∞©Ï∞® ÏßÑÏûÖÏùÑ ÏúÑÌï¥ Ìï¥Îãπ ÏßÄÏó≠ Ï∞®Îüâ ÌÜµÌñâÏùÑ Í∏àÏßÄÌï©ÎãàÎã§. Ï£ºÎ≥Ä Ï£ºÎØºÎì§ÏùÄ Ïó∞Í∏∞ Ìù°ÏûÖÏóê Ï£ºÏùòÌïòÏãúÍ∏∞ Î∞îÎûçÎãàÎã§.',
          category: 'fire',
          severity: 'emergency',
          location: 'ÍπÄÌï¥Ïãú ÎÇ¥Ïô∏Îèô',
          time: '2Ïùº Ï†Ñ',
          timestamp: '2024-01-13 16:45',
          isRead: true
        },
        {
          id: 5,
          title: '[Ïû¨ÎÇúÎ¨∏Ïûê] ÏßÄÏßÑ Í∞êÏßÄ ÏïåÎ¶º',
          content: 'Í≤ΩÎÇ® Ï∞ΩÏõê ÏßÄÏó≠ÏóêÏÑú Í∑úÎ™® 3.2Ïùò ÏßÄÏßÑÏù¥ Í∞êÏßÄÎêòÏóàÏäµÎãàÎã§. Ïó¨ÏßÑ Í∞ÄÎä•ÏÑ±Ïù¥ ÏûàÏúºÎãà Ï£ºÏùòÌïòÏãúÍ∏∞ Î∞îÎûçÎãàÎã§. ÌòÑÏû¨ÍπåÏßÄ ÌîºÌï¥ Ïã†Í≥†Îäî ÏóÜÎäî ÏÉÅÌô©ÏûÖÎãàÎã§.',
          category: 'earthquake',
          severity: 'info',
          location: 'Í≤ΩÎÇ® Ï∞ΩÏõêÏãú',
          time: '3Ïùº Ï†Ñ',
          timestamp: '2024-01-12 22:33',
          isRead: true
        }
      ];

      setAlerts(mockAlerts);
    } catch (error) {
      console.error('Ïû¨ÎÇúÎ¨∏Ïûê Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞ Ïã§Ìå®:', error);
      Alert.alert('Ïò§Î•ò', 'Ïû¨ÎÇúÎ¨∏Ïûê Ï†ïÎ≥¥Î•º Í∞ÄÏ†∏Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    if (visible) {
      fetchAlerts();
    }
  }, [visible]);

  // Ïã¨Í∞ÅÎèÑÎ≥Ñ Ïä§ÌÉÄÏùº
  const getSeverityStyle = (severity) => {
    switch (severity) {
      case 'emergency':
        return { backgroundColor: '#f44336', color: '#ffffff' };
      case 'warning':
        return { backgroundColor: '#ff9800', color: '#ffffff' };
      case 'info':
        return { backgroundColor: '#2196f3', color: '#ffffff' };
      default:
        return { backgroundColor: '#666', color: '#ffffff' };
    }
  };

  const getSeverityText = (severity) => {
    switch (severity) {
      case 'emergency':
        return 'Í∏¥Í∏â';
      case 'warning':
        return 'Í≤ΩÎ≥¥';
      case 'info':
        return 'Ï†ïÎ≥¥';
      default:
        return 'ÏïåÎ¶º';
    }
  };

  // Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ ÌïÑÌÑ∞ÎßÅ
  const filteredAlerts = alerts.filter(alert => 
    selectedCategory === 'all' || alert.category === selectedCategory
  );

  // ÏùΩÏùå Ï≤òÎ¶¨
  const markAsRead = (alertId) => {
    setAlerts(prev => prev.map(alert => 
      alert.id === alertId ? { ...alert, isRead: true } : alert
    ));
  };

  const renderAlertItem = (alert) => (
    <TouchableOpacity 
      key={alert.id} 
      style={[styles.alertItem, !alert.isRead && styles.unreadAlert]}
      onPress={() => markAsRead(alert.id)}
      activeOpacity={0.7}
    >
      <View style={styles.alertHeader}>
        <View style={[styles.severityBadge, getSeverityStyle(alert.severity)]}>
          <Text style={[styles.severityText, { color: getSeverityStyle(alert.severity).color }]}>
            {getSeverityText(alert.severity)}
          </Text>
        </View>
        <Text style={styles.alertTime}>{alert.time}</Text>
        {!alert.isRead && <View style={styles.unreadDot} />}
      </View>
      
      <Text style={styles.alertTitle}>{alert.title}</Text>
      <Text style={styles.alertContent} numberOfLines={3}>{alert.content}</Text>
      
      <View style={styles.alertFooter}>
        <Text style={styles.alertLocation}>üìç {alert.location}</Text>
        <Text style={styles.alertTimestamp}>{alert.timestamp}</Text>
      </View>
    </TouchableOpacity>
  );

  return (
    <Modal
      visible={visible}
      animationType="slide"
      transparent={true}
      onRequestClose={onClose}
    >
      <View style={styles.modalOverlay}>
        <View style={styles.modalContent}>
          <View style={styles.modalHeader}>
            <Text style={styles.modalTitle}>üö® Ïû¨ÎÇúÎ¨∏Ïûê</Text>
            <TouchableOpacity style={styles.closeButton} onPress={onClose}>
              <Text style={styles.closeButtonText}>‚úï</Text>
            </TouchableOpacity>
          </View>

          {/* Ïπ¥ÌÖåÍ≥†Î¶¨ ÌïÑÌÑ∞ */}
          <View style={styles.categoryContainer}>
            <ScrollView horizontal showsHorizontalScrollIndicator={false}>
              <View style={styles.categoryList}>
                {categories.map((category) => (
                  <TouchableOpacity
                    key={category.id}
                    style={[
                      styles.categoryButton,
                      selectedCategory === category.id && styles.selectedCategory
                    ]}
                    onPress={() => setSelectedCategory(category.id)}
                  >
                    <Text style={styles.categoryIcon}>{category.icon}</Text>
                    <Text style={[
                      styles.categoryText,
                      selectedCategory === category.id && styles.selectedCategoryText
                    ]}>
                      {category.name}
                    </Text>
                  </TouchableOpacity>
                ))}
              </View>
            </ScrollView>
          </View>

          {loading ? (
            <View style={styles.loadingContainer}>
              <ActivityIndicator size="large" color="#4285f4" />
              <Text style={styles.loadingText}>Ïû¨ÎÇúÎ¨∏ÏûêÎ•º Í∞ÄÏ†∏Ïò§Îäî Ï§ë...</Text>
            </View>
          ) : (
            <ScrollView style={styles.alertList} showsVerticalScrollIndicator={false}>
              {filteredAlerts.length > 0 ? (
                <>
                  <View style={styles.alertStats}>
                    <Text style={styles.alertStatsText}>
                      Ï¥ù {filteredAlerts.length}Í±¥Ïùò Ïû¨ÎÇúÎ¨∏Ïûê
                    </Text>
                  </View>
                  {filteredAlerts.map(renderAlertItem)}
                </>
              ) : (
                <View style={styles.noDataContainer}>
                  <Text style={styles.noDataText}>Ïû¨ÎÇúÎ¨∏ÏûêÍ∞Ä ÏóÜÏäµÎãàÎã§</Text>
                </View>
              )}
            </ScrollView>
          )}
        </View>
      </View>
    </Modal>
  );
};

const styles = StyleSheet.create({
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'flex-end',
  },
  modalContent: {
    backgroundColor: '#ffffff',
    borderTopLeftRadius: 20,
    borderTopRightRadius: 20,
    maxHeight: '85%',
    paddingBottom: 40,
  },
  modalHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 20,
    paddingVertical: 16,
    borderBottomWidth: 1,
    borderBottomColor: '#f0f0f0',
  },
  modalTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#333',
  },
  closeButton: {
    width: 32,
    height: 32,
    borderRadius: 16,
    backgroundColor: '#f0f0f0',
    alignItems: 'center',
    justifyContent: 'center',
  },
  closeButtonText: {
    fontSize: 16,
    color: '#666',
  },
  categoryContainer: {
    paddingVertical: 16,
    borderBottomWidth: 1,
    borderBottomColor: '#f0f0f0',
  },
  categoryList: {
    flexDirection: 'row',
    paddingHorizontal: 20,
  },
  categoryButton: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#f8f9fa',
    paddingHorizontal: 12,
    paddingVertical: 8,
    borderRadius: 20,
    marginRight: 8,
  },
  selectedCategory: {
    backgroundColor: '#4285f4',
  },
  categoryIcon: {
    fontSize: 16,
    marginRight: 4,
  },
  categoryText: {
    fontSize: 14,
    color: '#666',
    fontWeight: '500',
  },
  selectedCategoryText: {
    color: '#ffffff',
  },
  alertStats: {
    paddingHorizontal: 20,
    paddingVertical: 12,
    backgroundColor: '#f8f9fa',
  },
  alertStatsText: {
    fontSize: 14,
    color: '#666',
    textAlign: 'center',
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingVertical: 60,
  },
  loadingText: {
    marginTop: 16,
    fontSize: 16,
    color: '#666',
  },
  alertList: {
    flex: 1,
    paddingHorizontal: 20,
  },
  alertItem: {
    backgroundColor: '#ffffff',
    borderRadius: 12,
    padding: 16,
    marginVertical: 8,
    borderWidth: 1,
    borderColor: '#e0e0e0',
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
  },
  unreadAlert: {
    borderLeftWidth: 4,
    borderLeftColor: '#4285f4',
    backgroundColor: '#f8f9ff',
  },
  alertHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 12,
  },
  severityBadge: {
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 12,
  },
  severityText: {
    fontSize: 12,
    fontWeight: 'bold',
  },
  alertTime: {
    fontSize: 12,
    color: '#666',
  },
  unreadDot: {
    width: 8,
    height: 8,
    borderRadius: 4,
    backgroundColor: '#4285f4',
  },
  alertTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 8,
    lineHeight: 22,
  },
  alertContent: {
    fontSize: 14,
    color: '#666',
    lineHeight: 20,
    marginBottom: 12,
  },
  alertFooter: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingTop: 8,
    borderTopWidth: 1,
    borderTopColor: '#f0f0f0',
  },
  alertLocation: {
    fontSize: 12,
    color: '#999',
    fontWeight: '500',
  },
  alertTimestamp: {
    fontSize: 12,
    color: '#999',
  },
  noDataContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingVertical: 60,
  },
  noDataText: {
    fontSize: 16,
    color: '#666',
  },
});

export default DisasterAlertModal;